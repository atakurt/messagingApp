// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/atakurt/messagingApp/internal/infrastructure/repository (interfaces: MessageRepositoryInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	db "github.com/atakurt/messagingApp/internal/infrastructure/db"
	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockMessageRepositoryInterface is a mock of MessageRepositoryInterface interface.
type MockMessageRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMessageRepositoryInterfaceMockRecorder
}

// MockMessageRepositoryInterfaceMockRecorder is the mock recorder for MockMessageRepositoryInterface.
type MockMessageRepositoryInterfaceMockRecorder struct {
	mock *MockMessageRepositoryInterface
}

// NewMockMessageRepositoryInterface creates a new mock instance.
func NewMockMessageRepositoryInterface(ctrl *gomock.Controller) *MockMessageRepositoryInterface {
	mock := &MockMessageRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockMessageRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageRepositoryInterface) EXPECT() *MockMessageRepositoryInterfaceMockRecorder {
	return m.recorder
}

// GetMessageRetries mocks base method.
func (m *MockMessageRepositoryInterface) GetMessageRetries(arg0 int) ([]db.MessageRetry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageRetries", arg0)
	ret0, _ := ret[0].([]db.MessageRetry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageRetries indicates an expected call of GetMessageRetries.
func (mr *MockMessageRepositoryInterfaceMockRecorder) GetMessageRetries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageRetries", reflect.TypeOf((*MockMessageRepositoryInterface)(nil).GetMessageRetries), arg0)
}

// GetSentMessages mocks base method.
func (m *MockMessageRepositoryInterface) GetSentMessages(arg0, arg1 int) ([]db.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSentMessages", arg0, arg1)
	ret0, _ := ret[0].([]db.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSentMessages indicates an expected call of GetSentMessages.
func (mr *MockMessageRepositoryInterfaceMockRecorder) GetSentMessages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSentMessages", reflect.TypeOf((*MockMessageRepositoryInterface)(nil).GetSentMessages), arg0, arg1)
}

// GetUnsentMessages mocks base method.
func (m *MockMessageRepositoryInterface) GetUnsentMessages(arg0 int) ([]db.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnsentMessages", arg0)
	ret0, _ := ret[0].([]db.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnsentMessages indicates an expected call of GetUnsentMessages.
func (mr *MockMessageRepositoryInterfaceMockRecorder) GetUnsentMessages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnsentMessages", reflect.TypeOf((*MockMessageRepositoryInterface)(nil).GetUnsentMessages), arg0)
}

// InsertRetry mocks base method.
func (m *MockMessageRepositoryInterface) InsertRetry(arg0 *gorm.DB, arg1 db.Message, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRetry", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertRetry indicates an expected call of InsertRetry.
func (mr *MockMessageRepositoryInterfaceMockRecorder) InsertRetry(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRetry", reflect.TypeOf((*MockMessageRepositoryInterface)(nil).InsertRetry), arg0, arg1, arg2)
}

// MarkMessageInProcess mocks base method.
func (m *MockMessageRepositoryInterface) MarkMessageInProcess(arg0 *db.Message, arg1 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkMessageInProcess", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkMessageInProcess indicates an expected call of MarkMessageInProcess.
func (mr *MockMessageRepositoryInterfaceMockRecorder) MarkMessageInProcess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkMessageInProcess", reflect.TypeOf((*MockMessageRepositoryInterface)(nil).MarkMessageInProcess), arg0, arg1)
}

// MoveToDeadLetter mocks base method.
func (m *MockMessageRepositoryInterface) MoveToDeadLetter(arg0 *gorm.DB, arg1 db.Message, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveToDeadLetter", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// MoveToDeadLetter indicates an expected call of MoveToDeadLetter.
func (mr *MockMessageRepositoryInterfaceMockRecorder) MoveToDeadLetter(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveToDeadLetter", reflect.TypeOf((*MockMessageRepositoryInterface)(nil).MoveToDeadLetter), arg0, arg1, arg2)
}

// UpdateMessageAsError mocks base method.
func (m *MockMessageRepositoryInterface) UpdateMessageAsError(arg0 *gorm.DB, arg1 *db.Message, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMessageAsError", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMessageAsError indicates an expected call of UpdateMessageAsError.
func (mr *MockMessageRepositoryInterfaceMockRecorder) UpdateMessageAsError(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMessageAsError", reflect.TypeOf((*MockMessageRepositoryInterface)(nil).UpdateMessageAsError), arg0, arg1, arg2)
}

// UpdateMessageAsSent mocks base method.
func (m *MockMessageRepositoryInterface) UpdateMessageAsSent(arg0 *db.Message, arg1 string, arg2 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMessageAsSent", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMessageAsSent indicates an expected call of UpdateMessageAsSent.
func (mr *MockMessageRepositoryInterfaceMockRecorder) UpdateMessageAsSent(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMessageAsSent", reflect.TypeOf((*MockMessageRepositoryInterface)(nil).UpdateMessageAsSent), arg0, arg1, arg2)
}

// UpdateRetryCount mocks base method.
func (m *MockMessageRepositoryInterface) UpdateRetryCount(arg0 *gorm.DB, arg1 uint, arg2 int, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRetryCount", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRetryCount indicates an expected call of UpdateRetryCount.
func (mr *MockMessageRepositoryInterfaceMockRecorder) UpdateRetryCount(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRetryCount", reflect.TypeOf((*MockMessageRepositoryInterface)(nil).UpdateRetryCount), arg0, arg1, arg2, arg3)
}
