// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/atakurt/messagingApp/internal/features/messagecontrol/commandlistener (interfaces: Controllable)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockControllable is a mock of Controllable interface.
type MockControllable struct {
	ctrl     *gomock.Controller
	recorder *MockControllableMockRecorder
}

// MockControllableMockRecorder is the mock recorder for MockControllable.
type MockControllableMockRecorder struct {
	mock *MockControllable
}

// NewMockControllable creates a new mock instance.
func NewMockControllable(ctrl *gomock.Controller) *MockControllable {
	mock := &MockControllable{ctrl: ctrl}
	mock.recorder = &MockControllableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllable) EXPECT() *MockControllableMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockControllable) Start(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", arg0)
}

// Start indicates an expected call of Start.
func (mr *MockControllableMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockControllable)(nil).Start), arg0)
}

// Stop mocks base method.
func (m *MockControllable) Stop(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop", arg0)
}

// Stop indicates an expected call of Stop.
func (mr *MockControllableMockRecorder) Stop(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockControllable)(nil).Stop), arg0)
}
